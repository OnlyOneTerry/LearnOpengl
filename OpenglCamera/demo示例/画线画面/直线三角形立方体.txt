#include<glad/glad.h>
#include<GLFW/glfw3.h>
#include <learnopengl/shader.h>
#include <learnopengl/camera.h>

#include<iostream>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window,double xpos,double ypos);
void mouse_button_callback(GLFWwindow* window, int button, int action, int modes);
void processInput(GLFWwindow* window);
//绑定回调函数
void bindFuncCallback(GLFWwindow* window);

//初始化窗口
GLFWwindow* initWindow();
//加载opengl函数指针
bool  loadOPenglFun();


//要渲染的数据点
//三角形顶点数据
float vertices[] =
{
  -0.5f,-0.5f,0.0f,
   0.5f,-0.5f,0.0f,
   0.0f,0.5f,0.0f
};

float lineVertices[] =
{
  -0.5f,0.5f,0.0f,
   0.5f,-0.5f,0.0f,
   1.4f,1.2f,0.8f,
   0.0f,0.0f,0.0f
};

float cubeVertices[]=
{
	-0.5f, -0.5f, -0.5f, 
	 0.5f, -0.5f, -0.5f, 
	 0.5f,  0.5f, -0.5f, 
	 0.5f,  0.5f, -0.5f, 
	-0.5f,  0.5f, -0.5f, 
	-0.5f, -0.5f, -0.5f, 

	-0.5f, -0.5f,  0.5f, 
	 0.5f, -0.5f,  0.5f, 
	 0.5f,  0.5f,  0.5f, 
	 0.5f,  0.5f,  0.5f, 
	-0.5f,  0.5f,  0.5f, 
	-0.5f, -0.5f,  0.5f, 

	-0.5f,  0.5f,  0.5f, 
	-0.5f,  0.5f, -0.5f, 
	-0.5f, -0.5f, -0.5f, 
	-0.5f, -0.5f, -0.5f, 
	-0.5f, -0.5f,  0.5f, 
	-0.5f,  0.5f,  0.5f, 

	 0.5f,  0.5f,  0.5f, 
	 0.5f,  0.5f, -0.5f, 
	 0.5f, -0.5f, -0.5f, 
	 0.5f, -0.5f, -0.5f, 
	 0.5f, -0.5f,  0.5f, 
	 0.5f,  0.5f,  0.5f, 

	-0.5f, -0.5f, -0.5f, 
	 0.5f, -0.5f, -0.5f, 
	 0.5f, -0.5f,  0.5f, 
	 0.5f, -0.5f,  0.5f, 
	-0.5f, -0.5f,  0.5f, 
	-0.5f, -0.5f, -0.5f, 

	-0.5f,  0.5f, -0.5f, 
	 0.5f,  0.5f, -0.5f, 
	 0.5f,  0.5f,  0.5f, 
	 0.5f,  0.5f,  0.5f, 
	-0.5f,  0.5f,  0.5f, 
	-0.5f,  0.5f, -0.5f 
};

// 初始化VAO
unsigned int VBO, VAO;
//告诉gpu如何读取数据
void initVAOVBO();

// 初始化LineVAO
unsigned int LineVBO, LineVAO;
//告诉gpu如何读取数据
void initLineVAOVBO();

//初始化cubeVAO
unsigned int cubeVBO, cubeVAO;
//告诉gpu如何读取数据
void initCubeVAOVBO();

//退出清理
void exitToClear();
//初始化窗口大小
int SCR_WIDTH = 800;
int SCR_HEIGHT = 600;

//设置相机
Camera camera(glm::vec3(0.0f,0.0f,5.0f));
double lastX = 0.0f;
double lastY = 0.0f;

bool isMousePressed = false;
bool firstMouse = false;

int main()
{
	GLFWwindow* window = initWindow();
	if (!window)
	{
		std::cout << "failed to create windows" << std::endl;
		return -1;
	}
	bool loadSucc = loadOPenglFun();
	if (!loadSucc)
	{
		std::cout << "failed to load glad" << std::endl;
		return -1;
	}

	//绑定事件回调函数
	 bindFuncCallback(window);

	//创建Shader
	Shader triangleShader("D:/openGl/OpenglTest/OpenglCamera/OpenglCamera/shaders/triangle.vs", "D:/openGl/OpenglTest/OpenglCamera/OpenglCamera/shaders/triangle.fs");
	Shader lineShader("D:/openGl/OpenglTest/OpenglCamera/OpenglCamera/shaders/line.vs", "D:/openGl/OpenglTest/OpenglCamera/OpenglCamera/shaders/line.fs");
	Shader cubeShader("D:/openGl/OpenglTest/OpenglCamera/OpenglCamera/shaders/cube.vs", "D:/openGl/OpenglTest/OpenglCamera/OpenglCamera/shaders/cube.fs");

	//初始化三角形VAO VBO
	initVAOVBO();
	//初始化直线VAO VBO
	initLineVAOVBO();
	//初始化方体VAO VBO
	initCubeVAOVBO();

	//渲染循环
	while (!glfwWindowShouldClose(window))
	{
		processInput(window);
		//初始化场景背景色
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		//创建变换矩阵
		glm::mat4 model = glm::mat4(1.0f);
		glm::mat4 view = glm::mat4(1.0f);
		glm::mat4 projection = glm::mat4(1.0f);
		model = glm::rotate(model,glm::radians(30.0f),glm::vec3(0.1f, 0.0f, 0.0f));
		view = camera.GetViewMatrix();
		projection = glm::perspective(glm::radians(45.0f),(float)SCR_WIDTH/SCR_HEIGHT,0.1f,200.0f);

		//将model,view,projection传入shader
		cubeShader.setMat4("model", model);
		cubeShader.setMat4("view",  view);
		cubeShader.setMat4("projection", projection);

		lineShader.setMat4("model",model);
		lineShader.setMat4("view", view);
		lineShader.setMat4("projection", projection);

#if 1
		//激活shader
		triangleShader.use();
		//激活要启用的VAO
		glBindVertexArray(VAO);
		//drawCall
		glDrawArrays(GL_TRIANGLES, 0, 3);
#endif

#if 0
		//激活shader
		lineShader.use();
		//激活要启用的VAO
		glBindVertexArray(LineVAO);
		//drawCall
		int num = sizeof(lineVertices) / (sizeof(float) * 3);
		glDrawArrays(GL_LINE_STRIP, 0, num);
#endif

#if 0

		//激活shader
		cubeShader.use();
		//激活要启用的VAO
		glBindVertexArray(cubeVAO);
		//drawCall
		int cubePointsNum = sizeof(cubeVertices) / (sizeof(float) * 3);
		glDrawArrays(GL_TRIANGLES,0, cubePointsNum);

#endif

		//交换渲染缓冲
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	exitToClear();
}

void framebuffer_size_callback(GLFWwindow * window, int width, int height)
{
	glViewport(0, 0, width, height);
}

void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (!isMousePressed) return;

	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top

	lastX = xpos;
	lastY = ypos;

	camera.ProcessMouseRotate(xoffset, yoffset);
}

void mouse_button_callback(GLFWwindow* window, int button, int action, int modes)
{

	if (action == GLFW_PRESS)
	{
		switch (button)
		{
		case GLFW_MOUSE_BUTTON_LEFT:
			//std::cout << "..............left mouse pressed .............." << std::endl;
			isMousePressed = true;
		default:
			break;
		}
	}
	if (action == GLFW_RELEASE)
	{
		//std::cout << "..............left mouse released .............." << std::endl;
		switch (button)
		{
		case GLFW_MOUSE_BUTTON_LEFT:
			isMousePressed = false;
			firstMouse = true;
		default:
			break;
		}
	}
}

void processInput(GLFWwindow * window)
{
	glfwSetMouseButtonCallback(window, mouse_button_callback);
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}

GLFWwindow * initWindow()
{
	//初始化glfw
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif
	//创建 window

	GLFWwindow* window = nullptr;
	window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
	if (window == nullptr)
	{
		std::cout << "failed to  create GLFW window" << std::endl;
		glfwTerminate();
		return window;
	}
	//设置窗口上下文
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	return window;
}

bool loadOPenglFun()
{
	//调用glad加载Opengl函数指针

	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "failed to initalize GLAD" << std::endl;
		return false;
	}

	return true;
}

void bindFuncCallback(GLFWwindow * window)
{
	if (window)
	{
		glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
		glfwSetCursorPosCallback(window, mouse_callback);
	}
}

void initVAOVBO()
{
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	//绑定当前VAO
	glBindVertexArray(VAO);
	//绑定VBO到当前VAO
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//GPU开辟空间并传入数据
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
}

void initLineVAOVBO()
{
	glGenVertexArrays(1, &LineVAO);
	glGenBuffers(1, &LineVBO);
	//绑定当前VAO
	glBindVertexArray(LineVAO);
	//绑定VBO到当前VAO
	glBindBuffer(GL_ARRAY_BUFFER, LineVBO);
	//GPU开辟空间并传入数据
	glBufferData(GL_ARRAY_BUFFER, sizeof(lineVertices), lineVertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
}

void initCubeVAOVBO()
{
	glGenVertexArrays(1,&cubeVAO);
	glGenBuffers(1, &cubeVBO);
	//绑定当前VAO
	glBindVertexArray(cubeVAO);
	//绑定VBO到当前VAO
	glBindBuffer(GL_ARRAY_BUFFER,cubeVBO);
	//GPU开辟空间并传入数据
	glBufferData(GL_ARRAY_BUFFER,sizeof(cubeVertices),cubeVertices,GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
}



void exitToClear()
{
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glfwTerminate();
}
